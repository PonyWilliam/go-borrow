// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/borrow.proto

package borrow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Borrow service

func NewBorrowEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Borrow service

type BorrowService interface {
	Borrow(ctx context.Context, in *Borrow_Request, opts ...client.CallOption) (*Response, error)
	Return(ctx context.Context, in *Returns_Request, opts ...client.CallOption) (*Response, error)
	ToOther(ctx context.Context, in *ToOtherRequest, opts ...client.CallOption) (*Response, error)
}

type borrowService struct {
	c    client.Client
	name string
}

func NewBorrowService(name string, c client.Client) BorrowService {
	return &borrowService{
		c:    c,
		name: name,
	}
}

func (c *borrowService) Borrow(ctx context.Context, in *Borrow_Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Borrow.Borrow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowService) Return(ctx context.Context, in *Returns_Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Borrow.Return", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowService) ToOther(ctx context.Context, in *ToOtherRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Borrow.ToOther", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Borrow service

type BorrowHandler interface {
	Borrow(context.Context, *Borrow_Request, *Response) error
	Return(context.Context, *Returns_Request, *Response) error
	ToOther(context.Context, *ToOtherRequest, *Response) error
}

func RegisterBorrowHandler(s server.Server, hdlr BorrowHandler, opts ...server.HandlerOption) error {
	type borrow interface {
		Borrow(ctx context.Context, in *Borrow_Request, out *Response) error
		Return(ctx context.Context, in *Returns_Request, out *Response) error
		ToOther(ctx context.Context, in *ToOtherRequest, out *Response) error
	}
	type Borrow struct {
		borrow
	}
	h := &borrowHandler{hdlr}
	return s.Handle(s.NewHandler(&Borrow{h}, opts...))
}

type borrowHandler struct {
	BorrowHandler
}

func (h *borrowHandler) Borrow(ctx context.Context, in *Borrow_Request, out *Response) error {
	return h.BorrowHandler.Borrow(ctx, in, out)
}

func (h *borrowHandler) Return(ctx context.Context, in *Returns_Request, out *Response) error {
	return h.BorrowHandler.Return(ctx, in, out)
}

func (h *borrowHandler) ToOther(ctx context.Context, in *ToOtherRequest, out *Response) error {
	return h.BorrowHandler.ToOther(ctx, in, out)
}
